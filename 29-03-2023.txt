https://jsonplaceholder.typicode.com/posts




import React, { useState, useEffect } from 'react';
import axios from 'axios';

function Table() {
  const [data, setData] = useState([]);

  useEffect(() => {
    axios.get('https://jsonplaceholder.typicode.com/posts')
      .then(response => setData(response.data));
  }, []);

  return (
    <table>
      <thead>
        <tr>
          <th>User ID</th>
          <th>ID</th>
          <th>Title</th>
          <th>Body</th>
        </tr>
      </thead>
      <tbody>
        {data.map(item => (
          <tr key={item.id}>
            <td>{item.userId}</td>
            <td>{item.id}</td>
            <td>{item.title}</td>
            <td>{item.body}</td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}

export default Table;
 
 4
 
 pom.xml
 ----------
 
 <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
<dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.32</version>
        </dependency>
        
    </dependencies>

com.sf.evs.bean.ElectionBean.java
----------------------------------

package com.sf.evs.bean;

import jakarta.persistence.*;

@Entity
@Table(name="EVS_TBL_ELECTION")
public class ElectionBean
{
    @Id
    @GeneratedValue
private int electionID;
    @Column
private String name;
    @Column
private String electionDate;
    @Column
private String district;
    @Column
private String constituency; 
private String countingDate;
public int getElectionID() {
    return electionID;
}
public void setElectionID(int electionID) {
    this.electionID = electionID;
}
public String getName() {
    return name;
}
public void setName(String name) {
    this.name = name;
}
public String getElectionDate() {
    return electionDate;
}
public void setElectionDate(String electionDate) {
    this.electionDate = electionDate;
}
public String getDistrict() {
    return district;
}
public void setDistrict(String district) {
    this.district = district;
}
public String getConstituency() {
    return constituency;
}
public void setConstituency(String constituency) {
    this.constituency = constituency;
}
public String getCountingDate() {
    return countingDate;
}
public void setCountingDate(String countingDate) {
    this.countingDate = countingDate;
}

} 

application.properties
----------------------

spring.datasource.url=jdbc:mysql://localhost:3306/evs?useSSL=false
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto = update
server.port=8056

com.sf.evs.service.AdministratorService.java
----------------------------------------------
package com.sf.evs.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.sf.evs.bean.ElectionBean;
import com.sf.evs.dao.AdministratorDao;

@Service
public class AdministratorService {
@Autowired
private AdministratorDao adao;
public String addElection(ElectionBean electionBean) 
{
    return adao.addElection(electionBean);
}
}


com.sf.evs.dao.AdministratorDao.java
-------------------------------------

package com.sf.evs.dao;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.sf.evs.bean.ElectionBean;
@Repository
public class AdministratorDao {
    @Autowired
    private SessionFactory sessionFactory;
    private Session session;
    private Transaction transaction;
    public String addElection(ElectionBean electionBean) 
    {
        if(electionBean!=null)
        {
            session=sessionFactory.openSession();
            transaction=session.beginTransaction();
            session.save(electionBean);
            transaction.commit();
            session.close();
            return "SUCCESS";
        }
        else if(electionBean==null)
        {
            return "ERROR";
        }
        else
        {
            return "FAIL";
        }
    }
}


com.sf.evs.controller.AdministratorController.java
----------------------------------------------------
package com.sf.evs.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.sf.evs.bean.ElectionBean;
import com.sf.evs.service.AdministratorService;

@RestController
@CrossOrigin(origins = "http://localhost:3000/")
@RequestMapping("/admin")
public class AdministratorController {
    @Autowired
    private AdministratorService adserv;
@PostMapping("/addElection")
public String meth1(ElectionBean eb)
{
    adserv.addElection(eb);
    return "<h1>Election Added Successfully</h1>";
}
}
